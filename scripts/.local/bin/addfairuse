#!/bin/sh

# This script is meant to simplify the process of adding new songs to my live streaming music playlist.
# Given a list of files, it will scan their metadata and poll the user for missing values or offer
# to overwrite the old ones. It will also optionally add them to the Fair Use m3u playlist.
#
# NOTE: Pass multiple paths only if the specified files share the same TCOP, WCOP and COMM frames!
#
# FRAMES CHEATSHEET
# - TPE1:              artist name
# - TIT2:              song title
# - TCOP:              name of the license (Creative Commons, Royalty Free, etc.)
# - COMM [license]:    written non-public justification for claimed TCOP license
# - WCOP:              URL to license terms
# - WXXX [origin]:     URL to a playable media
#
# DEPENDENCIES
# - rsid3

[ $# -eq 0 ] && echo "addfairuse: At least one argument required." >&2 && exit 1

# Validate input
for f in "$@"; do
    [ ! -f "$f" ] || [ "$(expr "$f" : '.*\.mp3$')" = 0 ] && echo "addfairuse: the input must be a path to an mp3 file" >&2 && exit 1
done

playlist="$HOME/Music/Playlists/#Fair Use.m3u"

# Colors
FG=7 # normal foreground
BG=0 # normal background
HFG=8 # header foreground
HBG=0 # header background
EFG=1 # error foreground
EBG=0 # error background
QFG=3 # question foreground
QBG=0 # question background
CFG=4 # change type  foreground
AFG=6 # change arrow foreground
NFG=12 # change value foreground
header () { printf "\n%s\n" "$(tput setaf "$HFG" && tput setab "$HBG")$*$(tput setaf "$FG" && tput setab "$BG")"; }
info () { printf "%s\n" "  $*"; }
question () { printf "%s" "  $(tput bold && tput setaf "$QFG" && tput setab "$QBG")$*$(tput setaf "$FG" && tput setab "$BG" && tput sgr0)"; }
error () { printf "%s\n" "  $(tput setaf "$EFG" && tput setab "$EBG")$*$(tput setaf "$FG" && tput setab "$BG")" >&2; }

# TCOP, WCOP and COMM are frames that store repetitive information.
# If this script is passed multiple files, these frames will be set
# to the same value, and thus their values are fetched only once.

header "TCOP FRAME - copyright license"
if ! rsid3 --TCOP -- "$f" >/dev/null 2>&1; then
    info "No license found."
    question "Input license: "
    read -r license
    if [ -n "$license" ]; then
        info "Input registered successfully."
    else
        info "No input. Skipping."
    fi
else
    license="$(rsid3 --TCOP -- "$f" 2>/dev/null)"
    info "Found license: '$license'"
    question "Is this correct? [Y/n] "
    read -r ans
    [ -z "$ans" ] || [ "$ans" = y ] || [ "$ans" = Y ] || {
        question "Input new license: "
        read -r license
        if [ -n "$license" ]; then
            info "Input registered successfully."
        else
            info "No input. Continuing with the existing value."
        fi
    }
fi

header "WCOP FRAME - license terms URL"
if ! rsid3 --WCOP -- "$f" >/dev/null 2>&1; then
    info "No license terms URL found."
    links="$(rsid3 -- "$f" | sed -n 's/^WXXX//p')"
    [ -n "$links" ] && info "Existing URLs:" && info "$(printf "%s" "$links" | sed '1s/^/  /;2,$s/^/    /')"
    question "Input URL: "
    read -r license_url
    if [ -n "$license_url" ]; then
        info "Input registered successfully."
    else info "No input. Skipping."; fi
else
    license_url="$(rsid3 --WCOP -- "$f" 2>/dev/null)"
    info "Found URL: '$license_url'"
    question "Is this correct? [Y/n] "
    read -r ans
    [ -z "$ans" ] || [ "$ans" = y ] || [ "$ans" = Y ] || {
        links="$(rsid3 -- "$f" | sed -n 's/^WXXX//p')"
        [ -n "$links" ] && info "Existing URLs:" && info "$(printf "%s" "$links" | sed '1s/^/  /;2,$s/^/    /')"
        question "Input new URL: "
        read -r license_url
        if [ -n "$license_url" ]; then
            info "Input registered successfully."
        else info "No input. Skipping."; fi
    }
fi

header "COMM FRAME - license justification"
# Each file can contain an arbitrary number of comments,
# a comment frame consists of the comment, description and language (last two are optional).
desc="license"
if ! rsid3 --COMM "$desc" eng -- "$f" >/dev/null 2>&1; then
    info "No COMM[$desc](eng) found."
    tmp="$(mktemp -p /tmp addfairuse.XXXXXX)"
    info "Opening a temporary file '$tmp'..."
    sleep 1
    {
        printf "\n%s\n" "# No COMM[$desc](eng) found."
        printf "%s\n" "# Enter the desired comment value. Leave empty to skip."
    } >>"$tmp"
    rsid3 -- "$f" | sed 's/^/#   /' >>"$tmp"
    $EDITOR -- "$tmp"
    comment="$(sed '/^#/d ; s/`/'"'"'/g' "$tmp")"
    if [ -n "$comment" ]; then
        info "Input registered successfully."
    else info "Comment file empty. Skipping."; fi
    rm -- "$tmp"
else
    oldcomment="$(rsid3 --COMM "$desc" eng -- "$f" 2>/dev/null)"
    info "COMM[$desc](eng) already exists."
    question "Edit anyway? [y/N] "
    read -r ans
    if [ "$ans" = y ] || [ "$ans" = Y ]; then
        tmp="$(mktemp -p /tmp addfairuse.XXXXXX)"
        info "Opening a temporary file '$tmp'..."
        {
            printf "%s\n" "$oldcomment"
            printf "%s\n" "# Make any edits you like. Leave empty to skip."
            printf "%s\n" "# "
        } >>"$tmp"
        rsid3 -- "$f" | sed 's/^/#   /' >>"$tmp"
        "$EDITOR" -- "$tmp"
        comment="$(sed '/^#/d ; s/`/'"'"'/g' "$tmp")"
        if [ "$oldcomment" != "$comment" ]; then
            info "Input registered successfully."
        else info "No changes made. Skipping."; fi
        rm -- "$tmp"
    else
        info "Continuing with the existing value."
        comment="$oldcomment"
    fi
fi

# Write information that's common for all files
header "WRITE CHANGES TO FILES"
info "The following edits will be applied:"
[ -n "$license" ]     && info "- $(tput setaf "$CFG")license$(tput setaf "$AFG")     => $(tput setaf "$NFG")'$license'"
[ -n "$license_url" ] && info "- $(tput setaf "$CFG")license url$(tput setaf "$AFG") => $(tput setaf "$NFG")'$license_url'"
[ -n "$comment" ]     && info "- $(tput setaf "$CFG")comment$(tput setaf "$FG")"
echo ""
question "Proceed with these changes? [Y/n] "
read -r ans
[ -z "$ans" ] || [ "$ans" = y ] || [ "$ans" = Y ] && {
    for f in "$@"; do
        [ -n "$license" ]     && rsid3 --TCOP= "$license" -- "$f"
        [ -n "$license_url" ] && rsid3 --WCOP= "$license_url" -- "$f"
        [ -n "$comment" ]     && rsid3 --COMM= license eng "$comment" -- "$f"
        info "Finished writing to '$f'"
    done
}

# Fetch individual per-file information
for f in "$@"; do
    skip_media_url=1

    header "CURRENT FILE: $(basename -- "$f")"

    # In case of remixes, the arranger counts as artist
    # In case of classical music, the composer counts as artist
    # The performer can be included in the title like so:
    # "title (performed by XYZ)"
    if ! rsid3 --TPE1 -- "$f" >/dev/null 2>&1; then
        info "No artist found. Please ensure basic metadata exists (artist, title)."
        exit 1
    else
        info "Found artist: '$(rsid3 --TPE1 -- "$f")'"
    fi

    if ! rsid3 --TIT2 -- "$f" >/dev/null 2>&1; then
        info "No title found. Please ensure basic metadata exists (artist, title)."
        exit 1
    else
        info "Found title:  '$(rsid3 --TIT2 -- "$f")'"
    fi

    desc="origin"
    if ! rsid3 --WXXX "$desc" -- "$f" >/dev/null 2>&1; then
        info "No URL with \"$desc\" in description found."
        links="$(rsid3 -- "$f" | sed -n 's/^WXXX//p')"
        [ -n "$links" ] && info "Existing URLs:" && info "$(printf "%s" "$links" | sed '1s/^/  /;2,$s/^/    /')"
        question "Input URL: "
        read -r media_url
        if [ -n "$media_url" ]; then
            skip_media_url=0
            info "Input registered successfully."
        else info "No input. Skipping."; fi
    else
        info "Found URL: '$(rsid3 --WXXX "$desc" -- "$f")'"
        question "Is this correct? [Y/n] "
        read -r ans
        [ -z "$ans" ] || [ "$ans" = y ] || [ "$ans" = Y ] || {
            links="$(rsid3 -- "$f" | sed -n 's/^WXXX//p')"
            [ -n "$links" ] && info "Existing URLs:" && info "$(printf "%s" "$links" | sed '1s/^/  /;2,$s/^/    /')"
            question "Input new URL: "
            read -r media_url
            if [ -n "$media_url" ]; then
                skip_media_url=0
                info "Input registered successfully."
            else info "No input. Skipping."; fi
        }
    fi

    header "WRITE CHANGES TO FILE"
    total="$((1 - skip_media_url))"
    if [ "$total" -gt 0 ]; then
        info "The following edits will be applied:"
        [ "$skip_media_url" = 0 ]    && info "- $(tput setaf "$CFG")media url$(tput setaf "$AFG")   => $(tput setaf "$NFG")'$media_url'"
        echo ""
        question "Proceed with these changes? [Y/n] "
        read -r ans
        [ -z "$ans" ] || [ "$ans" = y ] || [ "$ans" = Y ] && {
            [ "$skip_media_url"     = 0 ] && info "Writing media URL..."       && rsid3 --WXXX= origin "$media_url" -- "$f"
            info "Finished writing to '$f'"
        }
    else info "No changes made."; fi

    header "ADD TO PLAYLIST"
    question "Add to \"$(basename -- "$playlist")\"? [Y/n] "
    read -r ans
    [ -z "$ans" ] || [ "$ans" = y ] || [ "$ans" = Y ] && {
        if pladd "$playlist" "$(realpath -- "$f")"; then
            info "Successfully added."
        else
            error "Failed to add to playlist."
        fi
    }
done

header "ALL FINISHED"
