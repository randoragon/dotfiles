#!/bin/sh

# This script lets you run a single gpg command with
# the primary secret key temporarily imported.
# After this command finishes, everything is cleaned
# up and the usb stick is unmounted.
#
# Inspired by:
# https://incenp.org/notes/2015/using-an-offline-gnupg-master-key.html

set -e

[ "$1" = "-h" ] || [ "$1" = "--help" ] && {
    printf "NAME
    gpg-sec - execute a gpg command with temporary secret primary key

SYNOPSIS
    gpg-sec [OPTIONS] PARTITION GPG_ARGS...

DESCRIPTION
    gpg-sec will probe the selected device for files and let the user
    choose one of them. It will import that file into the local gpg keyring.
    It will then run gpg with the remaining arguments. When the execution
    finishes, the imported key will be permanently deleted from the keyring.

    The intended use is temporarily importing primary secret keys to
    perform routine tasks such as changing key expiration dates etc.

    Under any normal circumstance running this command as superuser is
    not advised, as you will most likely fail to import the secret key.

    It is assumed that the secret key is additionally encrypted and must be
    decrypted before importing is possible.

OPTIONS
    -h, --help
    print this help message and exit

EXAMPLE
    gpg-sec /dev/sdc1 --edit-key user@email.com

"
    exit
}

[ $# -lt 2 ] && echo "gpg-sec: at least 2 arguments required" >&2 && exit

# Validate device path
[ -e "$1" ] && lsblk -lno NAME | grep -qF "${1#/dev/}" || {
    echo "gpg-sec: device $1 not found" >&2 && exit 1
}

# Mount the device in a temporary, safe location
mountdir="$(mktemp -d -p /tmp gpg-sec.XXXXX)"
mountdev="$1" ; shift
chmod 0700 "$mountdir" || { echo "gpg-sec: failed to set directory permissions" >&2 && exit 2; }
sudo mount -r "$mountdev" "$mountdir" || { echo "gpg-sec: failed to mount $mountdev" >&2 && exit 3; }

# Let the user pick a file
printf '%s contains the following files:\n' "$mountdev"
ls -l -- "$mountdir"
printf 'Input filename: '
read -r fname
[ ! -f "$mountdir/$fname" ] && { echo "gpg-sec: file not found" >&2 && umount "$mountdir" && exit 3; }
[ ! -r "$mountdir/$fname" ] && { echo "gpg-sec: file does not have read permissions" >&2 && umount "$mountdir" && exit 3; }

# Decrypt and import secret primary key from device
gpg --output - --decrypt "$mountdir/$fname" | gpg --import || { echo "gpg-sec: failed to import secret key" >&2 && umount "$mountdir" && exit 4; }
sudo umount "$mountdir" || { echo "gpg-sec: failed to unmount $mountdev" && exit 5; }

# Run the user command
gpg "$@"

# Delete the primary secret key from keyring
printf "\n%s________________________________________%s\n" "$(tput setaf 3)" "$(tput setaf 15)"
printf   "%sDELETING PRIMARY SECRET KEY FROM KEYRING%s\n" "$(tput setaf 3)" "$(tput setaf 15)"
gpg --list-secret-keys --with-keygrip
printf 'Paste the keygrip to delete: '
read -r keygrip
gpg-connect-agent "DELETE_KEY $keygrip" /bye

# Cleanup
rm -rf -- "$mountdir"
