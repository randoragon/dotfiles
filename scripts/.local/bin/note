#!/bin/sh

# Wrapper script for storing plain-text, markup, encrypted notes.
# See "note -h" for more details.
#
# Dependencies:
# - gpg, sha1sum
# - dmenu, fzf
# - md2html (md4c)
# - surf (html viewing)
# - env: $PDF_READER (fallback to zathura)
# - git
# - tar
# - asciidoctor, asciidoctor-diagram (for adoc support)
# - lxmake (custom script for LaTeX support)
# - typst (for typst support)
#
# For the lxmake script see https://github.com/Randoragon/dotfiles/blob/master/scripts/.local/bin/lxmake
set -e

# CONFIG
notedir="${XDG_DATA_HOME:-~/.local/share}/notes"
gpgid="$notedir/.gpg-id"
nl='
'

help () {
    printf "\
Usage:
    note [OPTIONS] [NAME]

    NAME is the name of the note to target. NAME can be omitted,
    in which case note will let you interactively select a note
    with either dmenu or fzf. The default action is viewing.

Options:
    -e, --edit
        Open note for editing instead of viewing. If the note
        does not exist, it is created.

    -r, --raw
        Output an unprocessed note directory. Can only be used with
        the -o option. The FILE argument must be a directory and
        cannot be - (standard output not supported).

    -o FILE, --output FILE
        Output note to file, or - for standard output. This option
        is mutually exclusive with --edit and creating new notes.

    -h, --help
        Display this help text.

    --dmenu, --fzf
        Force the use of dmenu or fzf. By default, dmenu will be
        used if the stdin descriptor is not open (test ! -t 0)
        and fzf will be used otherwise. However, this test is not
        foolproof, and so you can force either dmenu or fzf with
        these options, if you need. They are mutually exclusive
        and only take effect if NAME has not been passed.

NAME Extensions:
    *.txt       Plain text.

    *.md        Markdown.

    *.adoc      Asciidoc. See https://asciidoc.org/

    *.tex       XeLaTeX.

    *.typ       Typst. See https://github.com/typst/typst

    *.ldg       Ledger journal. See https://ledger-cli.org

String Substitutions:
    Inside a note in any format, the following strings will be
    substituted before compilation:

        NOTE_MTIME - last modification time, e.g. 'Tue 2021-08-10 14:20 CEST'
"
}

# Credit: https://stackoverflow.com/a/545413/10792539
dir_cksum () {
    find "$1" -type f -print0 | sort -z | xargs -0 cat | sha1sum
}

# extract <archive> <dir>
# Decrypts and extracts an archive into dir
extract () {
    tmp="$(mktemp --tmpdir note.XXXXX)"
    gpg --yes --quiet --output "$tmp" --decrypt -- "$1"
    tar -xzf "$tmp" -C "$2"
    rm -f -- "$tmp"
}

# archive <basedir> <archive> <gpuid>
# The opposite of extract, requires gpgid for encryption
# basedir is the root directory of the archive
# dir must be the NAME (not path) of a directory within basedir
archive () {
    tmp="$(mktemp --tmpdir note.XXXXX)"
    tar -C "$1" -czf "$tmp" -- NOTE
    gpg --yes --quiet --output "$2" --encrypt --recipient "$3" -- "$tmp"
    rm -f -- "$tmp"
}

# strsub <source> <file> <use_current_time?>
# Does in-place string substitution, as described in --help.
# source is the file that will be stat'ted for information
# SOURCE MUST BE A NOTES GIT REPO FILE!!!
# file is the file that will be modified with substitutions
# If use_current_time is passed, NOTE_MTIME will be substituted
# for the current time, instead of fetching the latest git commit.
strsub () {
    # Update modified time according to git data
    fpath="$(realpath --relative-to "$notedir" -- "$1")"
    if [ -z "$3" ]; then
        epoch="$(git -C "$notedir" log -1 --format='%at' -- "$fpath")"
    else
        epoch="$(date +%s)"
    fi
    touch -mct "$(date -d "@$epoch" '+%Y%m%d%H%M.%S')" -- "$1"

    mtime="$(date -d "@$epoch" '+%a %Y-%m-%d %H:%M %Z')"
    sed -i -e "s/NOTE_MTIME/$mtime/g" "$2"
}

# get_filetype <dir>
# Determines filetype by looking for existence of a NOTE file inside
# the given directory.
get_filetype () {
    [ -f "$1/NOTE/NOTE.txt" ]  && { echo "txt";  return; }
    [ -f "$1/NOTE/NOTE.md" ]   && { echo "md";   return; }
    [ -f "$1/NOTE/NOTE.adoc" ] && { echo "adoc"; return; }
    [ -f "$1/NOTE/NOTE.tex" ]  && { echo "tex";  return; }
    [ -f "$1/NOTE/NOTE.typ" ]  && { echo "typ";  return; }
    [ -f "$1/NOTE/NOTE.ldg" ]  && { echo "ldg";  return; }
    echo "note: NOTE file not found within the archive" >&2 && exit 4
}

# edit <archive>
# archive - path to the note archive file, relative to $notedir
edit () {
    [ ! -r "$gpgid" ] && echo "note: .gpg-id file not found, aborting." >&2 && exit 3
    tmpd="$(mktemp --tmpdir -d note.XXXXX)"
    extract "$notedir/$1" "$tmpd"
    target="$tmpd/NOTE/NOTE.$(get_filetype "$tmpd")"

    # Custom preprocessing based on file type.
    # The files variable holds a string of filenames to open.
    files="$target"
    case "${target##*.}" in
        adoc) files="$files${nl}$tmpd/NOTE/docinfo.html" ;;
    esac

    sum="$(dir_cksum "$tmpd/NOTE")"
    if [ -z "$interactive" ]; then
        echo "$files" | xargs alacritty -e "$EDITOR" "+cd $tmpd/NOTE" --
    else
        echo "$files " | xargs "$EDITOR" "+cd $tmpd/NOTE" --
    fi
    if [ "$(dir_cksum "$tmpd/NOTE")" = "$sum" ]; then
        echo "No changes were made, skipping."
    else
        # Custom postprocessing based on file type.
        case "${target##*.}" in
            tex)
                # Cache the PDF for quick access
                cachetarget="$(mktemp -p "$tmpd/NOTE" cachetarget.XXXXX)"
                cp -- "$target" "$cachetarget"
                strsub "$notedir/$1" "$cachetarget" 1
                cache="$tmpd/NOTE/CACHE.pdf"
                lxmake "$cachetarget" "$cache"
                rm -f -- "$cachetarget"
                ;;
            typ)
                # Cache the PDF for quick access
                cachetarget="$(mktemp -p "$tmpd/NOTE" cachetarget.XXXXX)"
                cp -- "$target" "$cachetarget"
                strsub "$notedir/$1" "$cachetarget" 1
                cache="$tmpd/NOTE/CACHE.pdf"
                typst compile -- "$cachetarget" "$cache"
                rm -f -- "$cachetarget"
                ;;
        esac

        archive "$tmpd" "$notedir/$1" "$(cat -- "$gpgid")"
        git -C "$notedir" add "$1"
        git -C "$notedir" commit -o "$1" -m "Edit $1"
    fi
    rm -rf -- "$tmpd"
}

# view <archive>
# archive - path to the note archive file, relative to $notedir
view () {
    tmpd="$(mktemp --tmpdir -d note.XXXXX)"
    extract "$notedir/$1" "$tmpd"

    fmt="$(get_filetype "$tmpd")"
    target="$tmpd/NOTE/NOTE.$fmt"

    # Perform string substitutions
    strsub "$notedir/$1" "$target"

    case "$fmt" in
        txt|ldg)
            if [ -z "$interactive" ]; then
                alacritty -e "$PAGER" -- "$target"
            else
                "$PAGER" -- "$target"
            fi
            ;;
        md)
            tmp="$(mktemp -p "$tmpd/NOTE" "note.XXXXX.html")"
            printf "%s" "$HTML_MD_STYLE" >"$tmp"
            md2html --github -- "$target" >>"$tmp"
            [ -s "$tmp" ] && surf -- file://"$tmp"
            ;;
        adoc)
            tmp="$(mktemp -p "$tmpd/NOTE" "note.XXXXX.html")"
            asciidoctor $ASCIIDOCTOR_OPTS -o "$tmp" -- "$target"
            [ -s "$tmp" ] && surf -- file://"$tmp"
            ;;
        tex)
            cache="$tmpd/NOTE/CACHE.pdf"
            # Ensure PDF cache exists
            [ ! -f "$cache" ] && {
                lxmake "$target" "$cache"
                archive "$tmpd" "$notedir/$1" "$(cat -- "$gpgid")"
                git -C "$notedir" add "$1"
                git -C "$notedir" commit -o "$1" -m "Cache $1"
            }
            "${PDF_READER:-zathura}" - <"$cache"
            ;;
        typ)
            cache="$tmpd/NOTE/CACHE.pdf"
            # Ensure PDF cache exists
            [ ! -f "$cache" ] && {
                typst compile -- "$target" "$cache"
                archive "$tmpd" "$notedir/$1" "$(cat -- "$gpgid")"
                git -C "$notedir" add "$1"
                git -C "$notedir" commit -o "$1" -m "Cache $1"
            }
            "${PDF_READER:-zathura}" - <"$cache"
            ;;
        *)
            printf "note: unknown note format \"%s\"\n" "$fmt" >&2
    esac
    rm -rf -- "$tmpd"
}

# create <note> <ext>
# note is a path of a new note relative to notedir
# ext is the target NOTE file extension
create () {
    tmpd="$(mktemp --tmpdir -d note.XXXXX)"
    mkdir -p -- "$tmpd/NOTE"
    target="$tmpd/NOTE/NOTE$2"

    # Customizable setup for every file type.
    # The files variable holds a string of filenames to open.
    :>"$target"
    files="$target"
    case "$2" in
        .adoc)
            docinfo="$tmpd/NOTE/docinfo.html"
            printf '=\n:docinfo: shared\n' >"$target"
            printf '<style>\n</style>' >"$docinfo"
            files="$files$nl$docinfo"
            ;;
    esac

    sum="$(dir_cksum "$tmpd/NOTE")"
    if [ -z "$interactive" ]; then
        echo "$files" | xargs alacritty -e $EDITOR "+cd $tmpd/NOTE" --
    else
        echo "$files" | xargs $EDITOR "+cd $tmpd/NOTE" --
    fi
    if [ "$(dir_cksum "$tmpd/NOTE")" = "$sum" ]; then
        echo "Note directory unchanged, cancelling."
    else
        mkdir -p -- "$notedir/$(dirname -- "$1")"
        archive "$tmpd" "$notedir/$1" "$(cat -- "$gpgid")"
        git -C "$notedir" add "$1"
        git -C "$notedir" commit -o "$1" -m "Create $1"
    fi
    rm -rf -- "$tmpd"
}

# output <archive> <filename>
# archive -  path to the note archive file, relative to $notedir
# filename - path to the file to export to, or - for stdout
output () {
    [ -n "$raw" ] && {
        output="$2"
        [ "$output" = - ] && echo 'note: cannot output to stdout when --raw is used' >&2 && exit 2
        [ -e "$output" ] && {
            [ ! -d "$output" ] && printf 'note: %s exists and is not a directory\n' "$output" >&2 && exit 1
            [ -n "$(ls -qA -- "$output")" ] && printf 'note: %s exists and is not empty\n' "$output" >&2 && exit 1
        }
        mkdir -p -- "$output"
        extract "$notedir/$1" "$output"
        find "$output/NOTE" -maxdepth 1 ! -name 'NOTE' -exec mv -f -- '{}' "$output/" \;
        [ -e "$output/NOTE/NOTE" ] && {
            tmp="$(mktemp -p "$output" NOTE.XXXXX)"
            mv -f -- "$output/NOTE/NOTE" "$tmp"
            rm -rf -- "$output/NOTE"
            mv -f -- "$tmp" "$output/NOTE"
        }
        rm -rf -- "$output/NOTE"
        return
    }

    tmpd="$(mktemp --tmpdir -d note.XXXXX)"
    extract "$notedir/$1" "$tmpd"
    output="$2"
    stdout=
    [ "$output" = - ] && stdout=1

    fmt="$(get_filetype "$tmpd")"
    target="$tmpd/NOTE/NOTE.$fmt"

    # Perform string substitutions
    strsub "$notedir/$1" "$target"

    case "$fmt" in
        txt|ldg)
            if [ $stdout ]; then
                cat -- "$target"
            else
                cp -- "$target" "$output"
            fi
            ;;
        md)
            if [ $stdout ]; then
                printf "%s" "$HTML_MD_STYLE"
                md2html --github -- "$target"
            else
                printf "%s" "$HTML_MD_STYLE" >"$output"
                md2html --github -- "$target" >>"$output"
            fi
            ;;
        adoc)
            if [ $stdout ]; then
                asciidoctor $ASCIIDOCTOR_OPTS -o - -- "$target"
            else
                asciidoctor $ASCIIDOCTOR_OPTS -o "$output" -- "$target"
            fi
            ;;
        tex)
            cache="$tmpd/NOTE/CACHE.pdf"
            # Ensure PDF cache exists
            [ ! -f "$cache" ] && {
                lxmake "$target" "$cache"
                archive "$tmpd" "$notedir/$1" "$(cat -- "$gpgid")"
                git -C "$notedir" add "$1"
                git -C "$notedir" commit -o "$1" -m "Cache $1"
            }
            if [ $stdout ]; then
                cat -- "$cache"
            else
                cp -- "$cache" "$output"
            fi
            ;;
        typ)
            cache="$tmpd/NOTE/CACHE.pdf"
            # Ensure PDF cache exists
            [ ! -f "$cache" ] && {
                typst compile -- "$target" "$cache"
                archive "$tmpd" "$notedir/$1" "$(cat -- "$gpgid")"
                git -C "$notedir" add "$1"
                git -C "$notedir" commit -o "$1" -m "Cache $1"
            }
            if [ $stdout ]; then
                cat -- "$cache"
            else
                cp -- "$cache" "$output"
            fi
            ;;
        *)
            printf "note: unknown note format \"%s\"\n" "$fmt" >&2
    esac
    rm -rf -- "$tmpd"
}

note=
edit=
raw=
output=
force_dmenu=
force_fzf=
while true; do
    case "$1" in
        -h|--help) help ; exit ; shift ;;
        -e|--edit) edit=1 ; shift ;;
        -r|--raw) raw=1 ; shift ;;
        -o|--output)
            if [ -z "$2" ]; then
                echo "note: output filename needed" >&2
                exit 2
            else
                output="$2"
                shift 2
            fi ;;
        --dmenu) force_dmenu=1 ; shift ;;
        --fzf)   force_fzf=1   ; shift ;;
        --) shift ; break ;;
        *) break ;;
    esac
done
if [ $# -eq 1 ]; then
    note="$1"
    [ -z "$(basename -- "$note")" ] && {
        echo 'note: cannot create a note with empty filename' >&2
        exit 2
    }
    [ -e "$note" ] && [ ! -f "$note" ] && {
        printf "note: '%s' already exists but is not a file\n" "$note" >&2
        exit 2
    }
elif [ $# -ne 0 ]; then
    echo 'note: too many arguments' >&2
    exit 1
fi

# Validate command-line arguments
[ -n "$force_dmenu" ] && [ -n "$force_fzf" ] && {
    echo 'note: --fzf and --dmenu are mutually exclusive' >&2
    exit 5
}
[ -n "$raw" ] && [ -z "$output" ] && {
    echo 'note: --raw can only be used with --output' >&2
    exit 5
}
[ -n "$raw" ] && [ "$output" = '-' ] && {
    echo 'note: cannot output to stdout when using --raw' >&2
    exit 5
}
[ -n "$edit" ] && [ -n "$output" ] && {
    echo 'note: --edit and --output are mutually exclusive' >&2
    exit 5
}

[ ! -d "$notedir" ] && echo "note: notes dir not found" >&2 && exit 1

# Check if shell is interactive
if [ -n "$force_dmenu" ]; then
    interactive=
elif [ -n "$force_fzf" ]; then
    interactive=1
else
    interactive=
    [ -t 0 ] && interactive=1
fi

# If the NAME argument was not specified, ask interactively
if [ -z "$note" ]; then
    if [ -n "$edit" ]; then
        prompt='Edit Note:'
    elif [ -n "$output" ]; then
        prompt='Output Note:'
    else
        prompt='View Note:'
    fi

    # For interactive shells use fzf, otherwise use dmenu.
    set +e
    if [ -n "$interactive" ]; then
        note="$(cd "$notedir" && find . -type f \! -path '\./\.*' -exec realpath --relative-to "$notedir" '{}' \; \
            | fzf --no-sort --no-multi --prompt "$prompt ")"
    else
        note="$(cd "$notedir" && find . -type f \! -path '\./\.*' -exec realpath --relative-to "$notedir" '{}' \; \
            | dmenu -F -l 10 -p "$prompt")"
    fi
    set -e

    [ -z "$note" ] && exit
fi

# Handle targeting non-existent notes (which is only allowed when editing)
[ ! -f "$notedir/$note" ] && [ -z "$edit" ] && {
    printf "note: '%s' does not exist\n" "$note" >&2
    exit 1
}

# Execute the right action
if [ -n "$output" ]; then
    output "$note" "$output"
elif [ -n "$edit" ]; then
    if [ ! -f "$notedir/$note" ]; then
        ext=
        case "$note" in
            *.md)   ext=.md   ;;
            *.adoc) ext=.adoc ;;
            *.txt)  ext=.txt  ;;
            *.tex)  ext=.tex  ;;
            *.typ)  ext=.typ  ;;
            *.ldg)  ext=.ldg  ;;
            *) echo 'note: missing or unsupported extension' >&2 && exit 2 ;;
        esac
        create "$note" "$ext"
    else
        edit "$note"
    fi
else
    view "$note"
fi
