#!/usr/bin/env python3

from os.path import expanduser
import subprocess, sys

help = '''NAME
        snippet - a simple copypasta script

SYNOPSIS
        snippet [OPTION]

DESCRIPTION
        This script searches for a ~/.config/snippetrc file, reads custom
        text snippets from it, prompts the user to choose one with bemenu,
        and finally copies the selected snippet to XA_CLIPBOARD and prints
        it to stdout.

        The intended use is simple storage of commonly used copypastas
        (like license notices, emoji and other annoying characters, etc.).

OPTIONS
        -h, --help
                Prints this help message.
        -f PATH, --file PATH
                Read from a custom file (default is ~/.config/snippetrc).

DEPENDENCIES
        bemenu - snippet selection
        wl-copy - copying to clipboard

SNIPPETRC FILE SYNTAX
        The syntax is inspired by troff and groff markup languages.

        1. Blank lines or lines starting with '#' will be ignored.
        2. Define short snippets with ".DEF name stuff to be copied".
        3. Define multiline snippets with ".BEGIN snippet name", followed by
           any number of lines, and ".END" at the end.

        Notice how short snippets must have a simple-word name, while
        multiline snippets don't have that limitation.

EXAMPLE SNIPPETRC
        # This is a comment
        .DEF alpha α
        .DEF beta β
        .DEF gamma γ
        .DEF greeting hello there

        .BEGIN Stallman copypasta
        I'd just like to interject for a moment.  What you're referring to as Linux,
        is in fact, GNU/Linux, or as I've recently taken to calling it, GNU plus Linux.
        Linux is not an operating system unto itself, but rather another free component
        of a fully functioning GNU system made useful by the GNU corelibs, shell
        utilities and vital system components comprising a full OS as defined by POSIX.
        .END

AUTHOR
        Randoragon <randoragongamedev@gmail.com>

LICENSE
        Copyright (c) 2020 Randoragon. MIT License.
'''

if __name__ == '__main__':
    fpath = '{}/.config/snippetrc'.format(expanduser('~'))

    if len(sys.argv) > 1:
        if sys.argv[1] in ('-h', '--help'):
            print(help)
            exit(0)
        elif sys.argv[1] in ('-f', '--file'):
            if len(sys.argv) < 3:
                print('snippet: file path expected after \"--file\"')
                exit(1)
            fpath = sys.argv[2]
        else:
            print('snippet: invalid option, try \"snippet --help\"')
            exit(1)

    # Open snippet file
    try:
        f = open(fpath, 'r')
    except Exception as e:
        print('snippet: failed to open file "{}" ({})'.format(fpath, type(e).__name__))
        exit(1)

    # Parse snippet file contents
    snippets = {}
    multiline = False
    ml_name = None
    linec = 1
    for line in f:
        if not multiline:
            if line.startswith('.DEF '):
                words = line.split(maxsplit=2)
                if len(words) != 3:
                    print(f'snippet: invalid .DEF statement (line:{linec})')
                    exit(1)
                snippets[words[1]] = words[2].strip()
            elif line.startswith('.BEGIN '):
                words = line.split(maxsplit=1)
                if len(words) < 2:
                    print(f'snippet: invalid .BEGIN statement (line:{linec})')
                    exit(1)
                multiline = True
                ml_name = words[1].strip()
                snippets[ml_name] = ''
            elif line[0] != '#' and line.strip() != '':
                print(f'snippet: invalid syntax (line:{linec})')
                exit(1)
        else:
            if line.startswith('.END'):
                snippets[ml_name] = snippets[ml_name].strip()
                multiline = False
                ml_name = None
            else:
                snippets[ml_name] += line
        linec += 1

    # Compose a list for bemenu
    items  = []
    values = {}
    for key, value in snippets.items():
        s = '{}: {}'.format(key, value.partition('\n')[0])
        items.append(s)
        values[s] = value

    # Run bemenu
    # reference: https://stackoverflow.com/questions/9393425/python-how-to-execute-shell-commands-with-pipe-but-without-shell-true
    p1 = subprocess.Popen(['printf', '%s\n'] + items, stdout=subprocess.PIPE)
    p2 = subprocess.Popen(['bemenu', '-i', '-l', '20', '-p', 'Snippet:'], stdin=p1.stdout, stdout=subprocess.PIPE)
    p1.stdout.close()
    out = p2.communicate()[0].decode('utf-8').strip()
    if out in values:
        p1 = subprocess.Popen(['printf', '%s', values[out]], stdout=subprocess.PIPE)
        p2 = subprocess.Popen(['wl-copy'], stdin=p1.stdout)
        print(values[out])
